resumo
anova
#Erro quadr√°tico m√©dio - estimativa de  ùúé2
SQE
n
#Erro quadr√°tico m√©dio
EQM <- SQE / n- 2
EQM
#Erro quadr√°tico m√©dio
EQM <- SQE / (n- 2)
EQM
#outra forma de se obter
EQM <- anova$'Mean Sq'[2]
EQM
#mais um jeito
EQM <- anova['Residuals', 'Mean Sq']
EQM
#calculando s
s <- sqrt(EQM)
s
#Calculando  ‚àë(ùëãùëñ‚àíùëã¬Ø)
soma_desvio <- sum(apply(dataset,1, function(x) (x['X'] - mean(dataset$X)) ** 2))
soma_desvio2
#Calculando  ‚àë(ùëãùëñ‚àíùëã¬Ø)
soma_desvio2 <- sum(apply(dataset,1, function(x) (x['X'] - mean(dataset$X)) ** 2))
soma_desvio2
#Calculando s beta 2
s_beta_2 <- s / sqrt(soma_desvio2)
s_beta_2
confianca <- 0.95
significancia <- 1 - confianca
graus_de_liberade <- resultado_regressao$df
graus_de_liberade
#obtendo probabilidade e t alpha 2
probabilidade <-  (0.5 + (confianca / 2))
probabilidade
t_alpha_2 <- qt(probabilidade)
graus_de_liberade <- resultado_regressao$df.residual
graus_de_liberade
#obtendo probabilidade e t alpha 2
probabilidade <-  (0.5 + (confianca / 2))
probabilidade
t_alpha_2 <- qt(probabilidade)
graus_de_liberdade <- resultado_regressao$df.residual
graus_de_liberdade
#obtendo probabilidade e t alpha 2
probabilidade <-  (0.5 + (confianca / 2))
probabilidade
t_alpha_2 <- qt(probabilidade, graus_de_liberdade )
t_alpha_2
#obtendo Obtendo t = b2 - B2 / sb2
t<-(beta_2 - 0) / s_beta_2
t
coeficientes <- resumo$coefficients
coeficientes
coeficientes['X', 't value']
t <= t_alpha_2
t <= -t_alpha_2
t >= t_alpha_2
p_valor <- 2 * (pt(t, graus_de_liberdade, lower.tail = F))
p_valor
p_valor <= significancia
#Calculando a estat√≠stica de teste (F)
anova
F <- anova['X', 'Mean Sq']
F <- anova['X', 'Mean Sq'] / anova['Residuals', 'Mean Sq']
F
anova['X', 'F value']
#obtendo p valor
p_valor <- anova['X', 'pr(>F)']
p_Valor
p_valor
#obtendo p valor
p_valor <- anova['X', 'Pr(>F)']
p_valor
p_valor <= significancia
#Importando o dataset
dataset <- read.csv('bases/Consumo_cerveja.csv', sep =';')
dataset
head(dataset)
#Importando o dataset
dataset <- read.csv('bases/Consumo_cerveja.csv', sep =',')
head(dataset)
#Importando o dataset
dataset <- read.csv('bases/Consumo_cerveja.csv', sep ='')
head(dataset)
#Importando o dataset
dataset <- read.csv('bases/Consumo_cerveja.csv')
head(dataset)
#Importando o dataset
dataset <- read.csv('bases/Consumo_cerveja.csv', sep = ';')
head(dataset)
sumaryy(dataset)
sumary(dataset)
summary(dataset)
#Importando o dataset
dataset <- read.csv('bases/Consumo_cerveja.csv', sep = ',')
head(dataset)
summary(dataset)
#Obtenha e avalie as estat√≠sticas descritivas dos dados
nrow(dataset)
#Importando o dataset
dataset <- read.csv('bases/Consumo_cerveja.csv', sep = ',')
#Visualize o conte√∫do do Data Frame
head(dataset)
#Obtenha e avalie as estat√≠sticas descritivas dos dados
nrow(dataset)
#Importando o dataset
dataset <- read.csv('bases/dados_projeto.csv', sep = ';')
#Visualize o conte√∫do do Data Frame
head(dataset)
#Obtenha e avalie as estat√≠sticas descritivas dos dados
nrow(dataset)
summary(dataset)
apply(dataset, 2, sd)
#An√°lise gr√°fica
#Construa um box plot para cada vari√°vel do dataset
ggplot(stack(dataset), aes( y = Y)) +
stat_boxplot(geom ='errorbar', width = 0.4) +
geom_boxplot(fill = c('#3274A1')) +
coord_flip() + #invertendo  x no y ou vice-versa
ylab("Consumo de Cerveja (litros)") +
ggtitle('Box-plot') +
theme(
plot.title=element_text(size = 14, hjust = 0.5),
axis.title.y=element_text(size = 12, vjust = +0.2),
axis.title.x=element_text(size = 12, vjust = -0.2),
axis.text.y=element_text(size = 10),
axis.text.x=element_text(size = 10),
)
#An√°lise gr√°fica
#Construa um box plot para cada vari√°vel do dataset
ggplot(stack(dataset), aes( y = y)) +
stat_boxplot(geom ='errorbar', width = 0.4) +
geom_boxplot(fill = c('#3274A1')) +
coord_flip() + #invertendo  x no y ou vice-versa
ylab("Consumo de Cerveja (litros)") +
ggtitle('Box-plot') +
theme(
plot.title=element_text(size = 14, hjust = 0.5),
axis.title.y=element_text(size = 12, vjust = +0.2),
axis.title.x=element_text(size = 12, vjust = -0.2),
axis.text.y=element_text(size = 10),
axis.text.x=element_text(size = 10),
)
#An√°lise gr√°fica
#Construa um box plot para cada vari√°vel do dataset
ggplot(dataset, aes( y = Y)) +
stat_boxplot(geom ='errorbar', width = 0.4) +
geom_boxplot(fill = c('#3274A1')) +
coord_flip() + #invertendo  x no y ou vice-versa
ylab("Consumo de Cerveja (litros)") +
ggtitle('Box-plot') +
theme(
plot.title=element_text(size = 14, hjust = 0.5),
axis.title.y=element_text(size = 12, vjust = +0.2),
axis.title.x=element_text(size = 12, vjust = -0.2),
axis.text.y=element_text(size = 10),
axis.text.x=element_text(size = 10),
)
#Construa um box plot para cada vari√°vel do dataset
ggplot(dataset, aes( y = X)) +
stat_boxplot(geom ='errorbar', width = 0.4) +
geom_boxplot(fill = c('#3274A1')) +
coord_flip() + #invertendo  x no y ou vice-versa
ylab("Temperatura M√©dia") +
ggtitle('Box-plot') +
theme(
plot.title=element_text(size = 14, hjust = 0.5),
axis.title.y=element_text(size = 12, vjust = +0.2),
axis.title.x=element_text(size = 12, vjust = -0.2),
axis.text.y=element_text(size = 10),
axis.text.x=element_text(size = 10),
)
#Identifique se existe uma rela√ß√£o linear entre as vari√°veis  Y E X
ggplot(data = dataset, aes(x = X, y = Y)) +
geom_point(size = 1.5, stroke = 0) +
geom_smooth(method = lm) +
xlab("Temperatura M√©dia") +
ylab("Consumo de cerveja(Litros)") +
ggtitle('Reta de Regress√£o - Consumo X Temperatura') +
theme(
plot.title=element_text(size = 12, hjust = 0.5),
axis.title.y=element_text(size = 10, vjust = +0.2),
axis.title.x=element_text(size = 10, vjust = -0.2),
axis.text.y=element_text(size = 10),
axis.text.x=element_text(size = 10),
)
#utilizando a matriz de correla√ß√£o
cor(dataset)
#Estimando o modelo de regress√£o linear simples
resultado_regressao <- lm(formula =  Y ~ X, data = dataset)
resultado_regressao
#Visualize o resultado da regress√£o
summary(resultado_regressao)
#Qual seria  o consumo de cerveja para um dia com temperatura m√©dia de 42¬∞c?
predict(resultado_regressao, data.frame(X = 42))
#Qual seria  o consumo de cerveja para um dia com temperatura m√©dia de 42¬∞c?
predict(resultado_regressao, data.frame(X = c(42, 39))
#Qual seria  o consumo de cerveja para um dia com temperatura m√©dia de 42¬∞c?
predict(resultado_regressao, data.frame(X = c(42,39))
#Qual seria  o consumo de cerveja para um dia com temperatura m√©dia de 42¬∞c?
predict(resultado_regressao, data.frame(X = c(42,39)))
#obtendo residuos   da regressao
dataset['Residuos'] <- resultado_regressao$residuals
head(dataset)
#gr√°fico de dispers√£o dos residuoes da regressao conttra o y previsto
ggplot(data = dataset, aes(x = Y_previsto, y = Residuos)) +
geom_point(size = 1.5, stroke = 0) +
geom_smooth(method = lm) +
xlab("Y_previsto") +
ylab("Residuos") +
ggtitle('Residuos vs Y_previsto') +
theme(
plot.title=element_text(size = 12, hjust = 0.5),
axis.title.y=element_text(size = 10, vjust = +0.2),
axis.title.x=element_text(size = 10, vjust = -0.2),
axis.text.y=element_text(size = 10),
axis.text.x=element_text(size = 10),
)
#Obtenha y_previsto
dataset$Y_previsto <- resultado_regressao$fitted.values
#gr√°fico de dispers√£o dos residuoes da regressao conttra o y previsto
ggplot(data = dataset, aes(x = Y_previsto, y = Residuos)) +
geom_point(size = 1.5, stroke = 0) +
geom_smooth(method = lm) +
xlab("Y_previsto") +
ylab("Residuos") +
ggtitle('Residuos vs Y_previsto') +
theme(
plot.title=element_text(size = 12, hjust = 0.5),
axis.title.y=element_text(size = 10, vjust = +0.2),
axis.title.x=element_text(size = 10, vjust = -0.2),
axis.text.y=element_text(size = 10),
axis.text.x=element_text(size = 10),
)
head(dataset)
#Importando o dataset
dataset <- read.csv('bases/dados_projeto.csv', sep = ';')
#Visualize o conte√∫do do Data Frame
nrow(dataset)
head(dataset)
#Obtenha y_previsto
dataset$Y_previsto <- resultado_regressao$fitted.values
#Obtenha e avalie as estat√≠sticas descritivas dos dados
summary(dataset)
#usando applt para calcula desvio padrao nas colunas
apply(dataset, 2, sd)
#An√°lise gr√°fica
#Construa um box plot para cada vari√°vel do dataset
ggplot(dataset, aes( y = Y)) +
stat_boxplot(geom ='errorbar', width = 0.4) +
geom_boxplot(fill = c('#3274A1')) +
coord_flip() + #invertendo  x no y ou vice-versa
ylab("Consumo de Cerveja (litros)") +
ggtitle('Box-plot') +
theme(
plot.title=element_text(size = 14, hjust = 0.5),
axis.title.y=element_text(size = 12, vjust = +0.2),
axis.title.x=element_text(size = 12, vjust = -0.2),
axis.text.y=element_text(size = 10),
axis.text.x=element_text(size = 10),
)
#Construa um box plot para cada vari√°vel do dataset
ggplot(dataset, aes( y = X)) +
stat_boxplot(geom ='errorbar', width = 0.4) +
geom_boxplot(fill = c('#3274A1')) +
coord_flip() + #invertendo  x no y ou vice-versa
ylab("Temperatura M√©dia") +
ggtitle('Box-plot') +
theme(
plot.title=element_text(size = 14, hjust = 0.5),
axis.title.y=element_text(size = 12, vjust = +0.2),
axis.title.x=element_text(size = 12, vjust = -0.2),
axis.text.y=element_text(size = 10),
axis.text.x=element_text(size = 10),
)
#Identifique se existe uma rela√ß√£o linear entre as vari√°veis  Y E X
ggplot(data = dataset, aes(x = X, y = Y)) +
geom_point(size = 1.5, stroke = 0) +
geom_smooth(method = lm) +
xlab("Temperatura M√©dia") +
ylab("Consumo de cerveja(Litros)") +
ggtitle('Reta de Regress√£o - Consumo X Temperatura') +
theme(
plot.title=element_text(size = 12, hjust = 0.5),
axis.title.y=element_text(size = 10, vjust = +0.2),
axis.title.x=element_text(size = 10, vjust = -0.2),
axis.text.y=element_text(size = 10),
axis.text.x=element_text(size = 10),
)
#utilizando a matriz de correla√ß√£o
cor(dataset)
#Estimando o modelo de regress√£o linear simples
resultado_regressao <- lm(formula =  Y ~ X, data = dataset)
resultado_regressao
#Obtenha y_previsto
dataset$Y_previsto <- resultado_regressao$fitted.values
#Visualize o resultado da regress√£o
summary(resultado_regressao)
#Qual seria  o consumo de cerveja para um dia com temperatura m√©dia de 42¬∞c?
predict(resultado_regressao, data.frame(X = 42))
#obtendo residuos da regressao
dataset['Residuos'] <- resultado_regressao$residuals
head(dataset)
#gr√°fico de dispers√£o dos residuoes da regressao conttra o y previsto
ggplot(data = dataset, aes(x = Y_previsto, y = Residuos)) +
geom_point(size = 1.5, stroke = 0) +
geom_smooth(method = lm) +
xlab("Y_previsto") +
ylab("Residuos") +
ggtitle('Residuos vs Y_previsto') +
theme(
plot.title=element_text(size = 12, hjust = 0.5),
axis.title.y=element_text(size = 10, vjust = +0.2),
axis.title.x=element_text(size = 10, vjust = -0.2),
axis.text.y=element_text(size = 10),
axis.text.x=element_text(size = 10),
)
#Obtenha o R¬≤ da regress√£o pelo m√©todo da soma dos quadrados
SQE <- sum(apply(dataset, 1, function(x) x['Residuos'] ** 2))
SQE
SQR <- sum(apply(dataset, 1, function(x) (x['Y_previsto'] - mean(dataset$Y_previsto)) ** 2))
sqr
SQR
SQT = SQR+SQE
SQT
R2 = SQR /SQT
R2
summary(resultado_regressao)$r.squared
summary(resultado_regressao)
#Instalando pacotes
install.packages("Ecdar")
#Instalando pacotes
install.packages("Ecdat")
library(Ecdat)
#dataset
data(Airq)
#Instalando pacotes
install.packages("Ecdat")
install.packages("Ecdat")
library(Ecdat) #carregando pacotes
# carregando dataset
data(Airq)
names(Airq)
summary(Airq)
# as vari√°veis podem ser cont√≠nuas ou categ√≥ricas (dividas em categorias)
# a vari√°vel resposta √© a qualidade do ar (airq)
plot(Airq~vala, data=Airq)
# as vari√°veis podem ser cont√≠nuas ou categ√≥ricas (dividas em categorias)
# a vari√°vel resposta √© a qualidade do ar (airq)
plot(airq~vala, data=Airq)
library(Ecdat) #carregando pacotes
# carregando dataset
data(Airq)
# verificando nome das variaveis
names(Airq)
summary(Airq) #sum√°rio das vari√°veis
# as vari√°veis podem ser cont√≠nuas ou categ√≥ricas (dividas em categorias)
# a vari√°vel resposta √© a qualidade do ar (airq)
plot(airq~vala, data=Airq)
# Montando um modelo
m1 <- lm(airq~vala, data=Airq)
# alguns dados podem nao ser lineares
m1
# alguns dados podem nao ser lineares
summary(m1)
m2 <- lm(airq-coas, data=Airq)
m2 <- lm(airq~coas, data=Airq)
summary(m2)
#Sim, a posi√ß√£o costeira da cidade influencia a qualidade do ar nas cidades
plot(airq~coas, data=Airq)
# A vari√°vel medi afeta  a qualidade do ar?
m3 <- lm(airq~medi, data=Airq)
summary(m3)
plor(airq~medi, data=Airq)
plot(airq~medi, data=Airq)
# A quantidade de chuva influencia na qualidade doa ar?
m4 <- lm(airq~rain, data=Airq)
summary(m4)
# A densidade populacional afeta a qualidade do ar?
m5 <- lm(airq~dens, data=Airq)
summary(m5)
# retas nos gr√°ficos
plot(airq~medi, data=Airq)
# y=a+b*x
# a <- intercepto (onde a reta vai tocar o eixo y)
# b <- inclina√ß√£o da reta
curve(9.936e+01+5.638e-04*x, ADD=T)
# y=a+b*x
# a <- intercepto (onde a reta vai tocar o eixo y)
# b <- inclina√ß√£o da reta
curve(9.936e+01+5.638e-04*x, add=T)
# retas nos gr√°ficos
plot(airq~medi, data=Airq)
# y=a+b*x
# a <- intercepto (onde a reta vai tocar o eixo y)
# b <- inclina√ß√£o da reta
curve(9.936e+01+5.638e-04*x, add=T)
# Melhorar o gr√°fico
plot(airq~medi, data=Airq, xlab="Renda m√©dia per capita", ylab="Qualidade do Ar")
# Melhorar o gr√°fico
plot(airq~medi, data=Airq, xlab="Renda m√©dia per capita", ylab="Qualidade do Ar", pch=16)
# Melhorar o gr√°fico
plot(airq~medi, data=Airq, xlab="Renda m√©dia per capita", ylab="Qualidade do Ar", pch=1, col='blue')
curve(9.936e+01+5.638e-04*x, add=T, col='red')
curve(9.936e+01+5.638e-04*x, add=T, col='red', lwd=2)
curve(9.936e+01+5.638e-04*x, add=T, col='red', lwd=2,lwy=2)
# Melhorar o gr√°fico
plot(airq~medi, data=Airq, xlab="Renda m√©dia per capita", ylab="Qualidade do Ar", pch=1, col='blue')
curve(9.936e+01+5.638e-04*x, add=T, col='red', lwd=2,lwy=2)
curve(9.936e+01+5.638e-04*x, add=T, col='red', lwd=2,lty=2)
# Melhorar o gr√°fico
plot(airq~medi, data=Airq, xlab="Renda m√©dia per capita", ylab="Qualidade do Ar", pch=1, col='blue')
curve(9.936e+01+5.638e-04*x, add=T, col='red', lwd=2,lty=2)
plot(airq~vala, data=Airq)
curve(9.936e+01+5.638e-04*x, add=T)
# Melhorando o gr√°ficos 2
plot(airq~vala, data=Airq, xlab="Valor das empreas $",
ylab="Qualidade do Ar", col='blue')
# Melhorando o gr√°ficos 2
plot(airq~vala, data=Airq, xlab="Valor das empreas $",
ylab="Qualidade do Ar", col='blue', pch=16)
# Melhorando o gr√°ficos 2
plot(airq~vala, data=Airq, xlab="Valor das empreas $",
ylab="Qualidade do Ar", col='blue', pch=16, cex=.15)
# Melhorando o gr√°ficos 2
plot(airq~vala, data=Airq, xlab="Valor das empreas $",
ylab="Qualidade do Ar", col='blue', pch=16, cex=1.5)
# Melhorando o gr√°ficos 2
plot(airq~vala, data=Airq, xlab="Valor das empreas $",
ylab="Qualidade do Ar", col='blue', pch=16, cex=1.2)
curve(9.936e+01+5.638e-04*x, add=T, col='darkblue', lwd=2, lty=2)
# alguns dados podem nao ser lineares
summary(m1) #para saber a signific√¢ncia do modelo
# Melhorando o gr√°ficos 2
plot(airq~vala, data=Airq, xlab="Valor das empreas $",
ylab="Qualidade do Ar", col='blue', pch=16, cex=1.2)
curve(96.451419+0.001969*x, add=T, col='darkblue', lwd=2, lty=2)
plot(airq~coas, data=Airq, xlab="Posi√ß√£o Costeira", ylab='Qualidade do Ar', col='blue')
plot(airq~coas, data=Airq, xlab="Posi√ß√£o Costeira", ylab='Qualidade do Ar', col='lightblue')
plot(airq~coas, data=Airq, xlab="Posi√ß√£o Costeira", ylab='Qualidade do Ar',
col='lightblue', ylim=c(50,170))
plot(airq~coas, data=Airq, xlab="Posi√ß√£o Costeira", ylab='Qualidade do Ar',
col='lightblue', ylim=c(50,170), cex.lab=1.3, main='An√°lise da qualidade do ar')
#Melhorando grafico m5
plot(airq~dens, data=Airq))
#Melhorando grafico m5
plot(airq~dens, data=Airq)
#Melhorando grafico m5
plot(airq~dens, data=Airq, xlab="Densidade Populacional", ylab="Qualidade do Ar", pch=1, col='blue')
summary(m5)
curve(1.054e+02+-3.857e-04*x, add=T, col='darkblue', lwd=2, lty=2)
#Melhorando grafico m5
plot(airq~dens, data=Airq, xlab="Densidade Populacional", ylab="Qualidade do Ar", pch=1, col='blue')
curve(1.054e+02+-3.857e-04*x, add=T, col='red', lwd=2, lty=2)
# Regress√£o M√∫ltipla
m_rm1 <- lm(airq~vala+coas, data=Airq)
summary(m_rm1)
# alguns dados podem nao ser lineares
summary(m1) #para saber a signific√¢ncia do modelo
#Gr√°fico Regress√£o M√∫ltipla
plot(airq~vala, data=Airq)
#Gr√°fico Regress√£o M√∫ltipla
plot(airq~vala, data=Airq, xlab="Valor das empreas $",
ylab="Qualidade do Ar")
#Gr√°fico Regress√£o M√∫ltipla
plot(airq~vala, data=Airq, xlab="Valor das empreas $",
ylab="Qualidade do Ar")
curve(1.171e+02+1.999e-03*x, add=T) # cidade n√£o costeira
curve(1.171e+02+1.999e-03*x+-2.968e+01, add=T) # cidade costeira
curve(1.171e+02+1.999e-03*x+-2.968e+01, add=T, lty=2) # cidade costeira
#Gr√°fico Regress√£o M√∫ltipla
plot(airq~vala, data=Airq, xlab="Valor das empreas $",
ylab="Qualidade do Ar")
curve(1.171e+02+1.999e-03*x, add=T) # cidade n√£o costeira
curve(1.171e+02+1.999e-03*x+-2.968e+01, lty=2, add=T) # cidade costeira
legent("bottonright")
legend("bottonright")
legend("bottomright")
legend("bottomright", c("N√£o Costeiras", "Costeiras"))
legend("bottomright", c("N√£o Costeiras", "Costeiras"), pch=1, lty=c(1,2))
legend("bottomright", c("N√£o Costeiras", "Costeiras"), pch=1, lty=c(1,2), bty='n')
#Gr√°fico Regress√£o M√∫ltipla
plot(airq~vala, data=Airq, xlab="Valor das empreas $",
ylab="Qualidade do Ar")
curve(1.171e+02+1.999e-03*x, add=T) # cidade n√£o costeira
curve(1.171e+02+1.999e-03*x+-2.968e+01, lty=2, add=T) # cidade costeira
legend("bottomright", c("N√£o Costeiras", "Costeiras"), pch=1, lty=c(1,2), bty='n')
m_rm2 <- lm(airq~vala+coes+dens, data=Airq)
summary(m_rm2)
m_rm2 <- lm(airq~vala+coes+dens, data=Airq)
summary(m_rm2)
m_rm2 <- lm(airq~vala+coas+dens, data=Airq)
summary(m_rm2)
# Contraste de modelos
# Comparar  um modelo completo com um modelo sem variavel em quest√£o
modelo_completp <- lm(airq~vala+coas+dens, data=Airq)
modelo_incompleto <- lm(airq~vala+coas, data=Airq)
# Contraste de modelos
# Comparar  um modelo completo com um modelo sem variavel em quest√£o
modelo_completo <- lm(airq~vala+coas+dens, data=Airq)
# os modelos s√£o iguals?
# se p valor for > 0.05 n√£o existe diferen√ßa dos modelos, entao continuo com modelo mais simples
# se p valor for < 0.05 os modelos s√£o diferentes e a vari√°vel n√£o deve ser retirada do modelo
anova(modelo_completo, modelo_incompleto)
plot(airq~vala, data=Airq, xlab="Valor das empreas $",
ylab="Qualidade do Ar", cex.lab=1.3, col='blue')
curve(1.171e+02+1.999e-03*x, add=T,col='darkblue', lwd=1.4) # cidade n√£o costeira
curve(1.171e+02+1.999e-03*x+-2.968e+01, lty=2, add=T,col='darkblue', lwd=1.4) # cidade costeira
legend("bottomright", c("N√£o Costeiras", "Costeiras"), pch=1, lty=c(1,2), bty='n',
col=c("darkblue", "darkblue"))
